¬ß Computational Sierpi≈Ñski Space and Algebras over the Sphere Spectrum

There is a deep analogy between partial computations and quantum transducers.
Working out this analogy in the framework of Homotopy Type Theory leads to an
interesting category of types known in literature as algebras over the Sphere
Spectrum.

¬ß¬ß Preliminaries: Maybe-monad, the Boolean and Discretly-Pointed Types
By `ùîπ[T]` (also known as `Maybe[T]` or `Optional[T]`) let's denote the type
  @Family ùîπ[T]:
    Value(t : T)
    Nothing
The type `ùîπ := ùîπ[Unit]` can be naturally identified with boolean type, maps
`T -> ùîπ` classify decidable predicates on `T`.

The functor `ùîπ[_]` is naturally forms a monad. Its Eilenberg-Moore category
is the category of pointed types with maps preserving the basepoint. This
category is a pointed (has zero object ùîπ[Nothing] ‚âÖ Unit) closed symmetric
monoidal category with smash product as tensor product and ùîπ as its unit.
The presence of the canonical basepoint-preserving map into ùîπ guarantees
that basepoint is discrete in each type (i.e. the property `p = basepoint`
is decidable for each object of the category). This category has all limits
and colimits of the ambient category, thus at least finitely complete and
cocomplete.

TODO: Check if this category is also locally monoidaly closed in the sense
of D. Chikhladze at <http://mathoverflow.net/questions/205902>.

The Kleisly category for `ùîπ[_]` consists of types of the form `ùîπ[T]` with maps
arising from maps `X -> ùîπ[Y]`. It can be also viewed as a subcategory of the 
EM-category, consisting only of the types of the form `ùîπ[T]` with `Nothing` as
basepoint. This category is still a pointed symmetric monoidal category with
zero object ùîπ[Nothing] and ‚àß-unit object ùîπ, it still has all colimits of the
ambient category, but it doesn't have any nontrivial limits and is not closed.
 
¬ß¬ß Partial Computations
By `‚Ñß[T]` let's denote the type of computations returning values of the type
`T` but possibly diverging at some inputs. Morally, elements of `‚Ñß[T]` should
be given by functions
  compute(timeout : Nat) : ùîπ[T]
returning either `Value(t)` if computation succeeds within `timeout` of steps
or `Nothing` otherwise with additional property that increasing timeout never
changes `Value(t)` to something else. Furthermore computations yielding same
results should be identified regardless of minimal timeout leading to result,
and it must be provable that `‚Ñß[_]` is naturally a monad, which requires
definition to be a bit more involved.

Recently Altenkirch et al. [1] have proposed a particularily nice definition
of `‚Ñß[T]`:
  @Family ‚Ñß[T]:
    ‚Ñß-extensionality(a b : ‚Ñß[T], a ‚äë b, b ‚äë a) : (a = b)
    Computation(c(timeout : Nat) : ‚Ñß[T], ‚àÄ(n : Nat), c(n) ‚äë c(n + 1))
    Value(t : T)
    ‚ä•
	
    @Family _‚äë_ : (a b : ‚Ñß[T]) -> Prop:
      refl(x : ‚Ñß[T]) : x ‚äë x
      bott(x : ‚Ñß[T]) : ‚ä• ‚äë x 
      mono(:c, :p) : Computation(c, p) ‚äë d -> ‚àÄ(n : Nat), c(n) ‚äë d
      nomo(:c, :p) : ‚àÄ(n : Nat), c(n) ‚äë d -> Computation(c, p) ‚äë d

Note that computation `c` maps to `‚Ñß[T]` instead of `ùîπ[T]` used in the na√Øve
formulation, and the definition of `‚Ñß[T]` is mutually inductive with definition
of _‚äë_, thus ‚Ñß[T] is a Higher Inductive-Inductive Type. It can be shown that it
is set-truncated if `T` is, and naturally forms a monad, which gives a rise to
the Kleisly category of types `‚Ñß[T]` and maps between them arising from maps of
the kind `X -> ‚Ñß[Y]`. It's a cocartesian category with zero object `‚Ñß[Empty]`,
hence a pointed category. It is not closed and admits no direct products, but
can be equipped with a smash product `‚Ñß[X] ‚àß ‚Ñß[Y] -> ‚Ñß[X √ó Y]` with neutral
element `‚Ñß` := `‚Ñß[Unit]` making it a symmetric monoidal category.

The type `‚Ñß` is analogous to the boolean, maps `T -> ‚Ñß` classify semidecidable
properties on `T`, so we'll call it the Sierpi≈Ñski Space.

This notion of partial computability enables definition of semi-deterministic
combinator `c +‚Ççe‚Çé g` that interleavingly computes `c` and `g` and returns the
value whichever returns first, given an evidence `e : c ‚à• g` that `c` and `g`
never terminate both, or agree on their results if they do. Composition of the
above mentioned Kleisli category distribute over `+`: `f(a + b) = f(a) + f(b)`
whenever either of sides defined. The operation `+` has neutral element ‚ä• and
is symmetric (associative and commutative). Besides that, it is idempotent and
admits countable completion, i.e. semi-deterministic sums of countably infinite
lists of ‚à•-compatible functions can be formed. This means in particular, that
‚Äì the type of maps `T -> ‚Ñß` almost satisfies axioms of a topology:
  it contains constant maps `‚ä•` and `Value(‚àó)` corresponding to trivially true
  and trivially false predicates, is closed under ‚àß-products providing finite
  intersections of predicates and under +-sums providing utmost countably
  infinite unions (arbitrary unions would yield a genuine topology, countable
  unions suffice for completely separable spaces).
‚Äì even when we're working in a model where all functions are continious, we can
  represent arbitrary measurable functions: by Lusin's theorem all measurable
  functions `X -> Y`, `X` being a completely separable space, can be obtained
  by combining a countable collection of ‚à•-compatible continious partial maps
  `X -> ‚Ñß[Y]` that remain continious when restricted to the domain where they
  terminate.

By `X ‚§ç Y` let's denote the type `(f : X -> ‚Ñß[Y], ¬¨{X | f(x) = ‚ä•})`, i.e. the
subtype of partial functions `X -> ‚Ñß[Y]` with negatively expressed (hence mere)
property that they always terminate. The type `X ‚§ç Y` contains all measurable
functions from `X` to `Y` in all models of HoTT where the Œ†-types contain all
continious functions from `X` to `Y`. Maps `_‚§ç_` clearly form a category, but
it remains to check whether this category is a closed symmetric monoidal one,
as in the classical case [2].

We'll refer to the type `T -> ‚Ñß` as "computational topology of T" (as already
mentioned, it almost satisfies the axioms of a topology, the difference being
irrelevant for most cases of interest).
The computational topology of the Cauchy Reals from the HoTT book contains all
rays of the form `{x : ‚Ñù | x < r}` and `{x : ‚Ñù | x > r}`, finite intersections
and utmost countable unions theirof, so it has provides at least as many open
and as many closed subsets as the standard topology on `‚Ñù`.
TODO: Try to show that presence of any others would imply (L)LPO.

It is quite easy to see that the computational topology of the types `‚Ñß[T]`
themselves contains the constant maps `‚ä•` and `Value(‚àó)` and the map `id`,
providing closed subsets `‚Ñß[T]`, `‚ä•` and `{x : ‚Ñß | x = ‚ä•}`. Existence of any
other closed subsets can be used to construct a "negation" map on `‚Ñß -> ‚Ñß`, 
hence implies LPO (ùîπ ‚âÖ ‚Ñß) and makes all computational topologies discrete.
We can prohibit it by stating that `(‚Ñß = ‚Ñß)` is contractible, which is exactly
statement of having no proper clopen (decidable) subsets. This assumption also
prohibits all types `‚Ñß[T]` any computationally closed sets besides `‚Ñß[T]`, `‚ä•`
and `{x : ‚Ñß | x = ‚ä•}`.

The Eilenberg-Moore category ‚Ñß-Mod for the `‚Ñß[_]`-monad is very similar to the
Eilenberg-Moore category for the `ùîπ[_]`-monad: it consists of pointed types
and basepoint-preserving morphisms, is a pointed closed symmetric monoidal
category with zero object `‚Ñß[Nothing]` and ‚àß-unit object ‚Ñß, has lots of (at
least all finite) limits and colimits. Due to the canonical map into the
‚àß-unit ‚Ñß type and canonical maps from the very same type into every object
T of this for every element of T, computational topology of the objects of
the EM-category is severely restricted: basepoint has to be closed subset
and no other point is allowed to be closed unless we are willing to accept
LPO (or if we insist on `(‚Ñß = ‚Ñß)` being contractible). At the same time
under assumption of a nonreusable ‚Ñß-oracle, computational topology of the
types `‚Ñß[T]` gets equivalent to `ùîπ[T]`, i.e. that of `T` with adjoined
discrete point.

Unfortunatelly, this category has no trace of semi-deterministic summation.
We would like to construct a similar category where types are naturally
equipped by such operation, so that it would naturally include the Kleisli
category for `‚Ñß[_]` as a subcategory, and have all the nice properties of
the EM-category like having enough limits and and being (locally?) closed.

[1] ‚ÄúPartiality, Revisited‚Äù, T. Altenkirch, N. Danielsson,
<http://www.cse.chalmers.se/~nad/publications/altenkirch-danielsson-types2016.pdf>

[2] ‚ÄúCategorical Probability Theory‚Äù, K. Sturtz,
<http://arxiv.org/pdf/1406.6030v4.pdf>

¬ß¬ß Quantum Transducers
Quantum transducers are to be understood as black boxes with one input hole and
one output hole, e.g. they take a photon, perform some transformations on it
using some magnets or alike, and pass the photon forth.

For composability, quantum transducers are typed much like maps (`A -> B`), but
types are to be understood as interfaces, not as datatypes. For example let's
denote by `f : Unit -> TwoSlits` the double-slit photon generator. Physically
it consists of a single-photon light source (basically, a special ultra-weak
LED), enclosed into a box with two small holes. The generated photon gets lost
on the way (`‚ä•`), or passed through either of the holes.

Subsequent transducers `g h : TwoSlits -> R`, connect respectively to the first
or to the second hole. If we only connect `g` to `f`, the photons passing
through the second hole also get lost and bolster the ‚ä•-range. If we only
connect `h` to `f`, it happens to the photons going through the first hole.

The mutual exclusiveness of `g` and `h` (written `e : g ‚à• h`) allows us to use
parallel compostion `g +‚Ççe‚Çé h`, which is somehow similar to semideterministic
sum, the main difference is that refl is not in general a generator of `‚à•`,
quantum transducers are not is mutually exclusive to itself normally. Wo this
`+` does not in general support equal arguments and thus is not in general 
idempotent (if is happens to be defined for equal arguments, it is), but it
still has to be symmetric (associative and commutative) up to higher homotopy
and still has the neutral element ‚ä•.

In the previous section we complained that the Eilenberg-Moore category for
the ‚Ñß-monad carries no trace of the sum operation. Now we're ready to define
a category that supports such operation and in a fashion compatible with
quantum transducers. Together with each type of quantum transducers we'll
define a type of ‚à•-compatible pairs of them, ‚à•-tripples of them and so on.

By higher ‚Ñß-module `M` let's denote the following construction:
‚Äì Sequence M.‚à•-Chain[length : Nat] of pointed types from ‚Ñß-Mod with
  M.‚à•-Chain[0] ‚âÖ ‚Ñß[Nothing].
‚Äì Maps between them of the form
    insertUnit(x : ‚à•-Chain, position : Fin[x.length + 1]) : ‚à•-Chain(x.length + 1),
	composeSubchain(
	 x : ‚à•-Chain,
	 start : Fin[x.length],
	 len : Fin[x.length - start]
	) : ‚à•-Chain(x.length - len + 1)
	permute(x : ‚à•-Chain, p : Permutation[x.length]) : ‚à•-Chain[x.length]
  and proofs that result of any composition of these maps resulting in ‚à•-Chain[1]
  depends only on the initial chain.
  It's easy to see that these maps between ‚à•-chains of length `n` and `m` are
  in one-to-one correspondence with zero-preserwing maps Fin[n] -> Fin[m], and
  the compostion of maps correspond to composition of their codes. 
‚Äì Basepoint-preserving map `eval : ‚Ñß(M.‚à•-Chain[1]) -> M.‚à•-Chain[1]` satisfying
  the usual properties of monadic action.
  
It is not hard to see that higher ‚Ñß-modules together with structure-preserving
maps between them are just a functor from Œì' to EM-category of `‚Ñß[_]` (pointed
types with special computationally topological structure). Classically this is
precisely the construction introduced by Connes in [4], and ‚Ñß-modules can be
identified with spectra. In particular, the inclusion of the Kleisli-category
for `‚Ñß[T]` maps Ts to their spectra. We speculate that these spectra can be
naturally seen as cocomutative comonoids, and the category of higher ‚Ñß-modules
is also locally closed monoidal category providing internal HOMs for its
objects coming from Kleisli category.

By ùîΩ let's denote the type of self-composable quantum transducers containing
exactly one non-‚ä• transducer. Let's see how it's composable chains look like:
‚Ñß.‚à•-Chain[0] = {‚ä•}
‚Ñß.‚à•-Chain[1] = {‚àó, ‚ä•}
‚Ñß.‚à•-Chain[2] = {(‚àó, ‚ä•), (‚ä•, ‚àó), ‚ä•}, where ‚ä• and non-‚ä• elements are equal due
to cancellation property of `+` and two non-‚ä• elements are equal because of
symmetry of `+`, so it's homotopically a circle.
‚Ñß.‚à•-Chain[3] = {(‚àó, ‚ä•, ‚ä•), (‚ä•, ‚àó, ‚ä•), (‚ä•, ‚ä•, ‚àó), ‚ä•}, where non-‚ä• elements
are equal with a 2-filler face because of symmetry of `+`, each of them is
equal to ‚ä• because of cancellation property, symmetry also induces 2-fillers
between these equalities.
In general, ‚Ñß.‚à•-Chain[n + 1] duplicates all non-‚ä• elements of ‚Ñß.‚à•-Chain[n]
and creates pairwise equalities between them, that's exactly what reduced
suspension does.
So, ùîΩ can be identified with sphere spectrum and it is also an initial
algebra over sphere spectrum and higher ‚Ñß-modules are precisely modules
over ùîΩ as algebra. Following A. Connes and C. Consani [4] we identify ùîΩ
with illusive ‚ÄúField with one element‚Äù and recover a vast generalization
of rings as algebras over ùîΩ, Algebras over the Sphere Spectrum. The object
‚Ñß is a particular example of such an algebra, the smallest idempotent
semiring (denoted ùîπ in [4]), types comming from the Kleisli category for
`‚Ñß[_]` should be precisely the ùîΩ-modules which are also ‚Ñß-modules.

We anticipate that path objects for A-modules naturally carry structure
of weak Hopf algebras over A, in particular for ‚Ñß-modules these can be
identified to groupoids, and for objects arising via the Kleisli category
the usual fundamental groupoid should reappear.

We suspect that internal language of the category of ùîΩ-modules it the
sought-for linear type theory containing both intuitionistic types
(‚Ñß-modules) and linear types (ùîΩ-modules), and note that for every
‚Ñß-module we can canonically form a linear version by forgetting its
equality-structure, and for any ùîΩ-module we can canonically form an
icon (see C. McBride, [5]) by collapsing all items together, and this
icon turns out to be canonically a cocommutative comonoid, hence
allowing duplication.


[4] ‚ÄúAbsolute algebra and Segal‚Äôs Œì-rings‚Äù, A. Connes, C. Consani,
<http://www.alainconnes.org/docs/gammasets.pdf>
[5] ‚ÄúI Got Plenty o' Nuttin'‚Äù, C. McBride
<https://personal.cis.strath.ac.uk/conor.mcbride/pub/Rig.pdf>
